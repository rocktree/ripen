#!/usr/bin/env bash

# -------------------------------------- Configuration

# Load the configuration file. All of these values are
# brought into this file automatically.
# 
# There is no security around this because we already assume
# a root user is running this script.
# 
# Declare all associative arrays (vars in ripen.conf)
# 
declare -A user
declare -A git
declare -A mysql
declare -A colors

# Load the config file
source "./ripen.conf"

# -------------------------------------- Helpers

colors=(
  ["black"]="\033[33;30m"
  ["red"]="\033[33;31m"
  ["green"]="\033[33;32m"
  ["yellow"]="\033[33;33m"
  ["blue"]="\033[33;34m"
  ["purple"]="\033[33;35m"
  ["cyan"]="\033[33;36m"
  ["white"]="\033[33;37m"
)

# puts -> echo content with an optional color
# 
puts () {
  if [ $2 ]; then
    echo -e "${colors[$2]}$1${colors[white]}"
  else
    echo -e $1
  fi
}

# cmd -> use `puts` to execute and output a command
# 
cmd () {
  puts "\n[EXEC] $1" "yellow"
  $1
}

# cmd_as_user -> run cmd as another user
# 
cmd_as_user () {
  cmd "sudo -H -u $username $1"
}

# append_to_file -> add a line to the end of a file
append_to_file () {
  puts "\n[EXEC] echo '$1' >> $2" "yellow"
  echo $1 >> $2
}

# -------------------------------------- Update System

if [ $update_system = true ]; then
  cmd "apt-get -y update --fix-missing"
  cmd "apt-get -y upgrade"
fi

# -------------------------------------- Development Libraries

cmd "apt-get -y install $dev_libs"

# -------------------------------------- Add User

if [ $add_user = true ]; then
  password="print crypt(${user[password]}, \"aa\")"
  password=$(perl -e "$password")
  cmd "useradd --password $password ${user[options]} ${user[username]}"

  # Add to the sudoers file if necessary
  if [ ${user[sudo]} = true ]; then
    cmd "cp /etc/sudoers /etc/sudoers.bak"
    append_to_file "${user[username]}    ALL=(ALL:ALL) ALL" /etc/sudoers
  fi
fi

home="/home/$username"
export HOME=$home

# -------------------------------------- Add Bash Config

if [ $adjust_bash_config = true ]; then
  cmd "rm $home/.bash_profile"
  cmd "rm $home/.profile"
  cmd "rm $home/.bashrc"
  cmd "curl $bashrc_url --output $home/.bashrc"
fi

# -------------------------------------- Install Git

if [ $install_git = true ]; then
  cmd "apt-get -y install git-core"
  # need the double quotes to make it all the way through,
  # so we have to break this one out
  puts "\n[EXEC] git config --global user.name \"${git[name]}\"" "yellow"
  git config --global user.name "${git[name]}"
  cmd "git config --global user.email ${git[email]}"
  cmd "git config --global color.ui ${git[colors]}"
  cmd "mv .gitconfig /home/$username/"
fi

# -------------------------------------- Install Nginx

if [ $install_nginx = true ]; then
  cmd "apt-get -y install nginx"
fi

# -------------------------------------- Install MySQL

if [ $install_mysql = true ]; then
  cmd "apt-get -y install libmysqlclient-dev"
  debconf-set-selections <<< "mysql-server mysql-server/root_password password ${mysql[root_password]}"
  debconf-set-selections <<< "mysql-server mysql-server/root_password_again password ${mysql[root_password]}"
  cmd "apt-get -y install mysql-server"
fi

# -------------------------------------- Install PostgreSQL

if [ $install_postgresql = true ]; then
  cmd "apt-get -y install postgresql libpq-dev postgresql-contrib"
fi

# -------------------------------------- Install Ruby

if [ $install_rbenv = true ]; then

  cmd "git clone https://github.com/sstephenson/rbenv.git $home/.rbenv"

  cmd "mv $home/.bashrc $home/.bashrc.tmp"
  cmd "rm $home/.bashrc"
  append_to_file 'export PATH="$HOME/.rbenv/bin:$PATH"' "$home/.bashrc"
  append_to_file 'eval "$(rbenv init -)"' "$home/.bashrc"
  puts "\n[EXEC] cat $home/.bashrc.tmp >> $home/.bashrc" "yellow"
  echo "$(cat $home/.bashrc.tmp)" >> $home/.bashrc
  cmd "rm $home/.bashrc.tmp"

  cmd "source $home/.bashrc"
  cmd "git clone https://github.com/sstephenson/ruby-build.git $home/.rbenv/plugins/ruby-build"

  cmd "rbenv install $ruby_version"
  cmd "rbenv global $ruby_version"

  if [ $install_bundler = true ]; then
    cmd "gem install bundler --no-ri --no-rdoc"
    cmd "rbenv rehash"
  fi
fi

# -------------------------------------- Reboot

if [ $reboot = true ]; then
  cmd "reboot"
fi
