#!/usr/bin/env bash

# -------------------------------------- Configuration

# Load the configuration file. All of these values are
# brought into this file automatically.
# 
# There is no security around this because we already assume
# a root user is running this script.
# 
# Declare all associative arrays (vars in ripen.conf)
# 
declare -A user
declare -A git
declare -A colors

# Load the config file
source "./ripen.conf"

# -------------------------------------- Helpers

# puts -> echo content with an optional color
# 
puts () {
  if [ $2 ]; then
    echo -e "${colors[$2]}$1${colors[white]}"
  else
    echo -e $1
  fi
}

# cmd -> use `puts` to execute and output a command
# 
cmd () {
  puts "[EXEC] $1\n" "yellow"
  $1
}

# cmd_as_user -> run cmd as another user
# 
cmd_as_user () {
  cmd "sudo -H -u $username $1"
}

# append_to_file -> add a line to the end of a file
append_to_file () {
  puts "[EXEC] echo '$1' >> $2\n" "yellow"
  echo $1 >> $2
}

# -------------------------------------- Add User

if [ $add_user = true ]; then
  password="print crypt(${user[password]}, \"aa\")"
  password=$(perl -e "$password")
  cmd "useradd --password $password ${user[options]} ${user[username]}"

  # Add to the sudoers file if necessary
  if [ ${user[sudo]} = true ]; then
    cmd "cp /etc/sudoers /etc/sudoers.bak"
    append_to_file "${user[username]}    ALL=(ALL:ALL) ALL" /etc/sudoers
  fi
fi

# -------------------------------------- Install Git

if [ $install_git = true ]; then
  cmd "sudo apt-get install git-core -y"
  # need the double quotes to make it all the way through,
  # so we have to break this one out
  puts "[EXEC] git config --global user.name \"${git[name]}\"\n" "yellow"
  git config --global user.name "${git[name]}"
  cmd "git config --global user.email ${git[email]}"
  cmd "git config --global color.ui ${git[colors]}"
  cmd "mv .gitconfig /home/$username/"
fi














